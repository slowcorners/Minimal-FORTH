                                                      ; File: forth.asm
                                                      ; ----------------------------------------------------------------------
                                                      ; M i n i m a l - F O R T H
                                                      ;
                                                      ; A minimal FORTH for the Minimal-CPU.
                                                      ;
                                                      ; Date:         2021-03-18
                                                      ; Version:      0.1
                                                      ; Author:       Nils "slowcorners" Kullberg
                                                      ; License:      MIT Open Source Initiative
                                                      ; ----------------------------------------------------------------------
                                                      
                                                      
                                                              ORG     0x8000
                                                      
                                                      
                                                      ; INCLUDE         defs.asm
                                                      
                                                      CH_DEL  EQU     127
                                                      
                                                      
                                                      ; INCLUDE         boot-table.asm
                                                      
                                                      ; ----------------------------------------------------------------------
                                                      ; BOOT TABLE
                                                      
8000 14 00 00                                         ORIGIN: JPA     CENT            ;  0: COLD start
8003 00                                                       NOP
8004 14 00 00                                                 JPA     WENT            ;  4: WARM start
8007 00                                                       NOP
8008 00 00                                                    DW      0               ;  8: Processor type in radix 36
800A 00 00                                                    DW      0               ; 10: Revision
800C 00 00                                                    DW      HFORTH          ; 12: Pointer to latest word defined
800E 7F 00                                                    DW      CH_DEL          ; 14: Backspace character
8010 00 00                                                    DW      XUP             ; 16: Pointer to initial user area
8012 00 00                                                    DW      XSP             ; 18: Initial data stack pointer
8014 00 00                                                    DW      XRP             ; 20: Initial data stack pointer
8016 00 00                                                    DW      XTIB            ; 22: Pointer to terminal input buffer
8018 1F 00                                                    DW      31              ; 24: Maximum FORTH word name length
801A 00 00                                                    DW      0               ; 26: Initial WARNING mode
801C 00 00                                                    DW      XDP             ; 28: Initial FENCE
801E 00 00                                                    DW      XDP             ; 30: Initial HERE
8020 00 00                                                    DW      XXVOC           ; 32: Pointer to initial VOC-LINK
8022 00 00                                                    DW      DSKBF           ; 34: Initial FIRST
8024 00 00                                                    DW      ENDBF           ; 36: Initial LIMIT
8026 00 00                                                    DW      0               ; 38: unused
8028 00 00                                                    DW      0               ; 40: unused
                                                      
                                                      ; INCLUDE         regs.asm
                                                      
                                                      ; ----------------------------------------------------------------------
                                                      ; THE VIRTUAL FORTH MACHINE REGISTERS
                                                      
                                                      IP:                             ; Instruction Pointer
802A 00                                               IPlo:   DB      0
802B 00                                               IPhi:   DB      0
                                                      
                                                      WA:                             ; Word Address Register
802C 00                                               WAlo:   DB      0
802D 00                                               WAhi:   DB      0
                                                      
                                                      RegBC:                          ; Working register R1
802E 00                                               RegB:   DB      0
802F 00                                               RegC:   DB      0
                                                      
                                                      RegDE:                          ; Working register R2
8030 00                                               RegD:   DB      0
8031 00                                               RegE:   DB      0
                                                      
                                                      SP:                             ; Data stack pointer
8032 00                                               SPlo:   DB      0
8033 00                                               SPhi:   DB      0
                                                      
                                                      RP:                             ; Return stack pointer
8034 00                                               RPlo:   DB      0
8035 00                                               RPhi:   DB      0
                                                      
                                                      UP:                             ; User area pointer
8036 00                                               UPlo:   DB      0
8037 00                                               UPhi:   DB      0
                                                      
                                                      
                                                      ; INCLUDE         helpers.asm
                                                      
                                                      ; ----------------------------------------------------------------------
                                                      ; HELPER FUNCTIONS
                                                      ;
                                                      
                                                      ; ------------------------------
                                                      ;       RegDE = (IP)+
                                                      
8038 1D 2A 80                                         _LIT:   LDR     IP
803B 16 31 80                                                 STA     RegE
803E 2E 2A 80                                                 INW     IP
8041 1D 2A 80                                                 LDR     IP
8044 16 30 80                                                 STA     RegD
8047 2E 2A 80                                                 INW     IP
804A 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       IP = IP + (IP)+
                                                      
804B 1D 2A 80                                         _BRAN:  LDR     IP
804E 16 31 80                                                 STA     RegE
8051 2E 2A 80                                                 INW     IP
8054 1D 2A 80                                                 LDR     IP
8057 16 30 80                                                 STA     RegD
805A 2F 2A 80                                                 DEW     IP
805D 15 31 80                                                 LDA     RegE
8060 28 2A 80                                                 ADB     IPlo
8063 15 30 80                                                 LDA     RegD
8066 2A 2B 80                                                 ACB     IPhi
8069 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       RegD = RegE & RegD
                                                      
806A 0E 08                                            AND:    LDI     8               ; Load bit counter
806C 16 2F 80                                                 STA     RegC            ; :
806F 15 31 80                                         AND10:  LDA     RegE            ; Load second operand
8072 05                                                       LSL                     ; Shift 2b7 into C
8073 16 31 80                                                 STA     RegE            ; Store shifted second operand
8076 15 30 80                                                 LDA     RegD            ; Load first operand
8079 3C 82 80                                                 BCC     AND20           ; If C is clear: Shift in a zero
                                                              ; 2b7 is set
807C 11 00                                                    CPI     0               ; Is first operand < 0, i.e. is 1b7 set?
807E 3F 82 80                                                 BMI     AND20           ; N is set: 1b7 is set
                                                              ; 1b7 is clear
8081 03                                                       CLC                     ; 1b7 is clear: Clear C
8082 06                                               AND20:  ROL                     ; Shift C into result
8083 16 30 80                                                 STA     RegD            ; Store first operand/result
8086 27 2F 80                                                 DEB     RegC            ; All bits done?
8089 3A 6F 80                                                 BNE     AND10           ;   NO: Do one more
808C 39                                                       RTS                     ;   YES: All done
                                                      
                                                      ; ------------------------------
                                                      ;       RegD = RegE | RegD
                                                      
808D 0E 08                                            OR:     LDI     8               ; Load bit counter
808F 16 2F 80                                                 STA     RegC            ; :
8092 15 31 80                                         OR10:   LDA     RegE            ; Load second operand
8095 05                                                       LSL                     ; Shift 2b7 into C
8096 16 31 80                                                 STA     RegE            ; Store shifted second operand
8099 15 30 80                                                 LDA     RegD            ; Load first operand
809C 3D A5 80                                                 BCS     OR20            ; If C is set, shift it into result
                                                              ; 2b7 is clear
809F 11 00                                                    CPI     0               ; Is first operand < 0, i.e. is 1b7 set?
80A1 3F A5 80                                                 BMI     OR20            ; N is clear: 1b7 is clear
                                                              ; 1b7 is clear
80A4 03                                                       CLC                     ; Neither bit is set: Clear C 
80A5 06                                               OR20:   ROL                     ; Shift C into result
80A6 16 30 80                                                 STA     RegD            ; Store first operand/result
80A9 27 2F 80                                                 DEB     RegC            ; All bits done?
80AC 3A 92 80                                                 BNE     OR10            ;   NO: Do one more
80AF 39                                                       RTS                     ;   YES: All done
                                                      
                                                      ; ------------------------------
                                                      ;       RegD = RegE ^ RegD
                                                      
80B0 0E 08                                            XOR:    LDI     8               ; Load bit counter
80B2 16 2F 80                                                 STA     RegC            ; :
80B5 15 31 80                                         XOR10:  LDA     RegE            ; Get second operand
80B8 05                                                       LSL                     ; Shift b7 into C
80B9 16 31 80                                                 STA     RegE            ; Store shifted second operand
80BC 15 30 80                                                 LDA     RegD            ; Load first operand
80BF 3D CA 80                                                 BCS     XOR20           ; C is set, check 1b7 for zero
                                                              ; 2b7 is clear
80C2 11 00                                                    CPI     0               ; Is first operand < 0, i.e. is b7 set?
80C4 3F D0 80                                                 BMI     XOR40           ; 1b7 is set and 2b7 is clear, shift in C which is set
80C7 14 CF 80                                                 JPA     XOR30           ; 1b7 and 2b7 are both zero, clear C and shift in 
                                                              ; 2b7 is set, check 1b7 for zero
80CA 11 00                                            XOR20:  CPI     0
80CC 3E D0 80                                                 BPL     XOR40           ; If 1b7 is zero, shift in C which is set
80CF 03                                               XOR30:  CLC                     ; 1b7 and 2b7 are equal, shift in a zero
80D0 06                                               XOR40:  ROL                     ; Shift whatever is in C into result
80D1 16 30 80                                                 STA     RegD            ; Store first operand/result
80D4 27 2F 80                                                 DEB     RegC            ; All bits done?
80D7 3A B5 80                                                 BNE     XOR10           ;   NO: Do one more
80DA 39                                                       RTS                     ;   YES: All done
                                                      
                                                      ; ------------------------------
                                                      ;       RegD = ~RegD
                                                      
80DB 15 30 80                                         NOT:    LDA     RegD            ; Load operand
80DE 0B                                                       NEG                     ; Two-complement negation
80DF 10 01                                                    SBI     1               ; Adjust to bitwise not
80E1 16 30 80                                                 STA     RegD            ; Store result
80E4 39                                                       RTS                     ; Done
                                                      
                                                      ; INCLUDE         inner.asm
                                                      
                                                      ; ----------------------------------------------------------------------
                                                      ; INNER INTERPRETER
                                                      
80E5 2F 32 80                                         DPUSH:  DEW     SP              ; -(SP) = R2
80E8 15 2F 80                                                 LDA     RegC
80EB 1E 32 80                                                 STR     SP
80EE 2F 32 80                                                 DEW     SP
80F1 15 2E 80                                                 LDA     RegB
80F4 1E 32 80                                                 STR     SP
80F7 2F 32 80                                         PUSH:   DEW     SP              ; -(SP) = R1
80FA 15 31 80                                                 LDA     RegE
80FD 1E 32 80                                                 STR     SP
8100 2F 32 80                                                 DEW     SP
8103 15 30 80                                                 LDA     RegD
8106 1E 32 80                                                 STR     SP
8109 1D 2A 80                                         NEXT:   LDR     IP              ; WA = (IP)+
810C 16 2C 80                                                 STA     WAlo
810F 2E 2A 80                                                 INW     IP
8112 1D 2A 80                                                 LDR     IP
8115 16 2D 80                                                 STA     WAhi
8118 2E 2A 80                                                 INW     IP
811B 1D 2C 80                                         NEXT10: LDR     WA              ; R1 = (WA)+
811E 16 31 80                                                 STA     RegE
8121 2E 2C 80                                                 INW     WA
8124 1D 2C 80                                                 LDR     WA
8127 16 30 80                                                 STA     RegD
812A 2E 2C 80                                                 INW     WA
812D 1C 30 80                                                 JPR     RegDE           ; jump @(TMP)
                                                      
                                                      ; INCLUDE         primaries.asm
                                                      
                                                      ; ----------------------------------------------------------------------
                                                      ; FORTH PRIMARIES
                                                      ;
                                                      
8130 83 4C 49 D4                                      HLIT:   DB      ^3 "LI" ^'T'                            ; ***** LIT
8134 00 00                                                    DW      0
8136 38 81                                            LIT:    DW      LIT0
8138 38 38 80                                         LIT0:   JPS     _LIT            ; R1 = (IP)+
813B 14 F7 80                                                 JPA     PUSH            ; -(SP) = R1, NEXT
                                                      
813E 87 45 58 45 43 55 54 C5                          HEXEC:  DB      ^7 "EXECUT" ^'E'                        ; ***** EXECUTE
8146 30 81                                                    DW      HLIT
8148 4A 81                                            EXEC:   DW      EXEC0
814A 1D 32 80                                         EXEC0:  LDR     SP              ; WA = (SP)+
814D 16 2C 80                                                 STA     WAlo
8150 2E 32 80                                                 INW     SP
8153 1D 32 80                                                 LDR     SP
8156 16 2D 80                                                 STA     WAhi
8159 2E 32 80                                                 INW     SP
815C 14 1B 81                                                 JPA     NEXT10          ; jump @(WA)+
                                                      
815F 86 42 52 41 4E 43 C8                             HBRAN:  DB      ^6 "BRANC" ^'H'                         ; ***** BRANCH
8166 3E 81                                                    DW      HEXEC
8168 6A 81                                            BRAN:   DW      BRAN0
816A 38 4B 80                                         BRAN0:  JPS     _BRAN           ; IP = IP + (IP)
816D 14 09 81                                                 JPA     NEXT
                                                      
8170 87 30 42 52 41 4E 43 C8                          HZBRAN: DB      ^7 "0BRANC" ^'H'                        ; ***** 0BRANCH
8178 5F 81                                                    DW      HBRAN
817A 7C 81                                            ZBRAN:  DW      ZBRAN0
817C 1D 32 80                                         ZBRAN0: LDR     SP
817F 11 00                                                    CPI     0               ; Low byte non-zero?
8181 3A 95 81                                                 BNE     ZBRA10          ; YES: Do not branch
8184 2E 32 80                                                 INW     SP
8187 1D 32 80                                                 LDR     SP
818A 11 00                                                    CPI     0               ; High byte non-zero?
818C 3A 98 81                                                 BNE     ZBRA20          ; YES: Do not branch
818F 2E 32 80                                                 INW     SP
8192 14 6A 81                                                 JPA     BRAN0           ; IP = IP + (IP), NEXT
8195 2E 32 80                                         ZBRA10: INW     SP
8198 2E 32 80                                         ZBRA20: INW     SP
819B 2E 2A 80                                                 INW     IP              ; Just skip jump offset
819E 2E 2A 80                                                 INW     IP
81A1 14 09 81                                                 JPA     NEXT
