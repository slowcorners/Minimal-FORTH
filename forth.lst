                                                      ; ----------------------------------------------------------------------
                                                      ; M i n i m a l - F O R T H
                                                      ;
                                                      ; A minimal FORTH for the Minimal-CPU.
                                                      ;
                                                      ; Date:         2021-03-18
                                                      ; Version:      0.1
                                                      ; Author:       Nils "slowcorners" Kullberg
                                                      ; License:      MIT Open Source Initiative
                                                      ; ----------------------------------------------------------------------
                                                      
                                                      
                                                              ORG     0x8000
                                                              
                                                      
                                                      ; INCLUDE         defs.asm
                                                      
                                                      CH_LF   EQU     10
                                                      CH_DEL  EQU     127
                                                      
                                                      ; INCLUDE         boot-table.asm
                                                      
                                                      ; ----------------------------------------------------------------------
                                                      ; BOOT TABLE
                                                      
8000 14 B5 89                                         ORIGIN: JPA     CENT            ;  0: COLD start
8003 00                                                       NOP
8004 14 DD 89                                                 JPA     WENT            ;  4: WARM start
8007 00                                                       NOP
8008 00 00                                                    DW      0               ;  8: Processor type in radix 36
800A 00 00                                                    DW      0               ; 10: Revision
800C 00 00                                                    DW      HFORTH          ; 12: Pointer to latest word defined
800E 7F 00                                                    DW      CH_DEL          ; 14: Backspace character
8010 00 00                                                    DW      XUP             ; 16: Pointer to initial user area
8012 30 89                                                    DW      XSP             ; 18: Initial data stack pointer
8014 40 89                                                    DW      XRP             ; 20: Initial data stack pointer
8016 00 00                                                    DW      XTIB            ; 22: Pointer to terminal input buffer
8018 1F 00                                                    DW      31              ; 24: Maximum FORTH word name length
801A 00 00                                                    DW      0               ; 26: Initial WARNING mode
801C 20 89                                                    DW      XDP             ; 28: Initial FENCE
801E 20 89                                                    DW      XDP             ; 30: Initial HERE
8020 00 00                                                    DW      XXVOC           ; 32: Pointer to initial VOC-LINK
8022 00 00                                                    DW      DSKBF           ; 34: Initial FIRST
8024 00 00                                                    DW      ENDBF           ; 36: Initial LIMIT
8026 00 00                                                    DW      0               ; 38: unused
8028 00 00                                                    DW      0               ; 40: unused
                                                      ; INCLUDE         regs.asm
                                                      
                                                      ; INCLUDE         helpers.asm
                                                      
                                                      ; ----------------------------------------------------------------------
                                                      ; HELPER FUNCTIONS
                                                      ;
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = (IP)+
                                                      
802A 1D 00 89                                         _LIT:   LDR     IP
802D 16 10 89                                                 STA     R1.0
8030 2E 00 89                                                 INW     IP
8033 1D 00 89                                                 LDR     IP
8036 16 11 89                                                 STA     R1.1
8039 2E 00 89                                                 INW     IP
803C 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       IP = IP + (IP)+
                                                      
803D 1D 00 89                                         _BRAN:  LDR     IP
8040 16 10 89                                                 STA     R1.0
8043 2E 00 89                                                 INW     IP
8046 1D 00 89                                                 LDR     IP
8049 16 11 89                                                 STA     R1.1
804C 2F 00 89                                                 DEW     IP
804F 15 10 89                                                 LDA     R1.0
8052 28 00 89                                                 ADB     IP.0
8055 15 11 89                                                 LDA     R1.1
8058 2A 01 89                                                 ACB     IP.1
805B 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = (SP) "half function"
                                                      
805C 1D 04 89                                         _GET1_: LDR     SP
805F 16 10 89                                                 STA     R1.0
8062 2E 04 89                                                 INW     SP
8065 1D 04 89                                                 LDR     SP
8068 16 11 89                                                 STA     R1.1
806B 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = (SP)
                                                      
806C 38 5C 80                                         _GET1:  JPS     _GET1_
806F 2F 04 89                                                 DEW     SP
8072 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = (SP)+
                                                      
8073 38 5C 80                                         _POP1:  JPS     _GET1_
8076 2E 04 89                                                 INW     SP
8079 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1X = (SP)+
                                                      
807A 1D 04 89                                         _DPOP1: LDR     SP
807D 16 10 89                                                 STA     R1.0
8080 2E 04 89                                                 INW     SP
8083 1D 04 89                                                 LDR     SP
8086 16 11 89                                                 STA     R1.1
8089 2E 04 89                                                 INW     SP
808C 1D 04 89                                                 LDR     SP
808F 16 12 89                                                 STA     R1.2
8092 2E 04 89                                                 INW     SP
8095 1D 04 89                                                 LDR     SP
8098 16 13 89                                                 STA     R1.3
809B 2E 04 89                                                 INW     SP
809E 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R2 = (SP) "half function"
                                                      
809F 1D 04 89                                         _GET2_: LDR     SP
80A2 16 14 89                                                 STA     R2.0
80A5 2E 04 89                                                 INW     SP
80A8 1D 04 89                                                 LDR     SP
80AB 16 15 89                                                 STA     R2.1
80AE 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R2 = (SP)
                                                      
80AF 38 9F 80                                         _GET2:  JPS     _GET2_
80B2 2F 04 89                                                 DEW     SP
80B5 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = (SP)+
                                                      
80B6 38 9F 80                                         _POP2:  JPS     _GET2_
80B9 2E 04 89                                                 INW     SP
80BC 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R2X = (SP)+
                                                      
80BD 1D 04 89                                         _DPOP2: LDR     SP
80C0 16 14 89                                                 STA     R2.0
80C3 2E 04 89                                                 INW     SP
80C6 1D 04 89                                                 LDR     SP
80C9 16 15 89                                                 STA     R2.1
80CC 2E 04 89                                                 INW     SP
80CF 1D 04 89                                                 LDR     SP
80D2 16 16 89                                                 STA     R2.2
80D5 2E 04 89                                                 INW     SP
80D8 1D 04 89                                                 LDR     SP
80DB 16 17 89                                                 STA     R2.3
80DE 2E 04 89                                                 INW     SP
80E1 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R3 = (SP) "half function"
                                                      
80E2 1D 04 89                                         _GET3_: LDR     SP
80E5 16 18 89                                                 STA     R3.0
80E8 2E 04 89                                                 INW     SP
80EB 1D 04 89                                                 LDR     SP
80EE 16 19 89                                                 STA     R3.1
80F1 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R3 = (SP)
                                                      
80F2 38 E2 80                                         _GET3:  JPS     _GET3_
80F5 2F 04 89                                                 DEW     SP
80F8 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R3 = (SP)+
                                                      
80F9 38 E2 80                                         _POP3:  JPS     _GET3_
80FC 2E 04 89                                                 INW     SP
80FF 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = (RP) "half function"
                                                      
8100 1D 06 89                                         _RGET1_: LDR    RP
8103 16 10 89                                                 STA     R1.0
8106 2E 06 89                                                 INW     RP
8109 1D 06 89                                                 LDR     RP
810C 16 11 89                                                 STA     R1.1
810F 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = (RP)
                                                      
8110 38 00 81                                         _RGET1: JPS     _RGET1_
8113 2F 06 89                                                 DEW     RP
8116 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = (RP)+
                                                      
8117 38 00 81                                         _RPOP1: JPS     _RGET1_
811A 2E 06 89                                                 INW     RP
811D 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R2 = (RP) "half function"
                                                      
811E 1D 06 89                                         _RGET2_: LDR    RP
8121 16 14 89                                                 STA     R2.0
8124 2E 06 89                                                 INW     RP
8127 1D 06 89                                                 LDR     RP
812A 16 15 89                                                 STA     R2.1
812D 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R2 = (RP)
                                                      
812E 38 1E 81                                         _RGET2: JPS     _RGET2_
8131 2F 06 89                                                 DEW     RP
8134 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = (RP)
                                                      
8135 38 1E 81                                         _RPOP2: JPS     _RGET2_
8138 2E 06 89                                                 INW     RP
813B 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R3 = (RP) "half function"
                                                      
813C 1D 06 89                                         _RGET3_: LDR    RP
813F 16 18 89                                                 STA     R3.0
8142 2E 06 89                                                 INW     RP
8145 1D 06 89                                                 LDR     RP
8148 16 19 89                                                 STA     R3.1
814B 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R3 = (RP)
                                                      
814C 38 3C 81                                         _RGET3: JPS     _RGET3_
814F 2F 06 89                                                 DEW     RP
8152 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R3 = (RP)
                                                      
8153 38 3C 81                                         _RPOP3: JPS     _RGET3_
8156 2E 06 89                                                 INW     RP
8159 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       (SP) = R1 "half function"
                                                      
815A 15 11 89                                         _PUT1_: LDA     R1.1
815D 1E 04 89                                                 STR     SP
8160 2F 04 89                                                 DEW     SP
8163 15 10 89                                                 LDA     R1.0
8166 1E 04 89                                                 STR     SP
8169 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       (SP) = R1
                                                      
816A 2E 04 89                                         _PUT1:  INW     SP
816D 38 5A 81                                                 JPS     _PUT1_
8170 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       -(SP) = R1
                                                      
8171 2F 04 89                                         _PUSH1: DEW     SP
8174 38 5A 81                                                 JPS     _PUT1_
8177 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       (SP) = R2 "half function"
                                                      
8178 15 15 89                                         _PUT2_: LDA     R2.1
817B 1E 04 89                                                 STR     SP
817E 2F 04 89                                                 DEW     SP
8181 15 14 89                                                 LDA     R2.0
8184 1E 04 89                                                 STR     SP
8187 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       (SP) = R2
                                                      
8188 2E 04 89                                         _PUT2:  INW     SP
818B 38 78 81                                                 JPS     _PUT2_
818E 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       -(SP) = R2
                                                      
818F 2F 04 89                                         _PUSH2: DEW     SP
8192 38 78 81                                                 JPS     _PUT2_
8195 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       (SP) = R3 "half function"
                                                      
8196 15 19 89                                         _PUT3_: LDA     R3.1
8199 1E 04 89                                                 STR     SP
819C 2F 04 89                                                 DEW     SP
819F 15 18 89                                                 LDA     R3.0
81A2 1E 04 89                                                 STR     SP
81A5 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       (SP) = R3
                                                      
81A6 2E 04 89                                         _PUT3:  INW     SP
81A9 38 96 81                                                 JPS     _PUT3_
81AC 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       -(SP) = R3
                                                      
81AD 2F 04 89                                         _PUSH3: DEW     SP
81B0 38 96 81                                                 JPS     _PUT3_
81B3 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       (RP) = R1 "half function"
                                                      
81B4 15 11 89                                         _RPUT1_: LDA    R1.1
81B7 1E 06 89                                                 STR     RP
81BA 2F 06 89                                                 DEW     RP
81BD 15 10 89                                                 LDA     R1.0
81C0 1E 06 89                                                 STR     RP
81C3 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       (RP) = R1
                                                      
81C4 2E 06 89                                         _RPUT1: INW     RP
81C7 38 B4 81                                                 JPS     _RPUT1_
81CA 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       -(RP) = R1
                                                      
81CB 2F 06 89                                         _RPUSH1: DEW    RP
81CE 38 5A 81                                                 JPS     _PUT1_
81D1 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       (RP) = R2 "half function"
                                                      
81D2 15 15 89                                         _RPUT2_: LDA    R2.1
81D5 1E 06 89                                                 STR     RP
81D8 2F 06 89                                                 DEW     RP
81DB 15 14 89                                                 LDA     R2.0
81DE 1E 06 89                                                 STR     RP
81E1 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       (RP) = R2
                                                      
81E2 2E 06 89                                         _RPUT2: INW     RP
81E5 38 D2 81                                                 JPS     _RPUT2_
81E8 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       -(RP) = R2
                                                      
81E9 2F 06 89                                         _RPUSH2: DEW    RP
81EC 38 D2 81                                                 JPS     _RPUT2_
81EF 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       (RP) = R3 "half function"
                                                      
81F0 15 19 89                                         _RPUT3_: LDA    R3.1
81F3 1E 06 89                                                 STR     RP
81F6 2F 06 89                                                 DEW     RP
81F9 15 18 89                                                 LDA     R3.0
81FC 1E 06 89                                                 STR     RP
81FF 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       (RP) = R3
                                                      
8200 2E 06 89                                         _RPUT3: INW     RP
8203 38 F0 81                                                 JPS     _RPUT3_
8206 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       -(RP) = R3
                                                      
8207 2F 06 89                                         _RPUSH3: DEW    RP
820A 38 F0 81                                                 JPS     _RPUT3_
820D 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = R1 + R2
                                                      
820E 15 14 89                                         _ADD16: LDA     R2.0
8211 28 10 89                                                 ADB     R1.0
8214 15 15 89                                                 LDA     R2.1
8217 2A 11 89                                                 ACB     R1.1
821A 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1X = R1X + R2X
                                                      
821B 15 14 89                                         _ADD32: LDA     R2.0
821E 28 10 89                                                 ADB     R1.0
8221 15 15 89                                                 LDA     R2.1
8224 2A 11 89                                                 ACB     R1.1
8227 15 16 89                                                 LDA     R2.2
822A 2A 12 89                                                 ACB     R1.2
822D 15 17 89                                                 LDA     R2.3
8230 2A 13 89                                                 ACB     R1.3
8233 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = (R3)
                                                      
8234 1D 18 89                                         _LD16:  LDR     R3
8237 16 10 89                                                 STA     R1.0
823A 2E 18 89                                                 INW     R3
823D 1D 18 89                                                 LDR     R3
8240 16 11 89                                                 STA     R1.1
8243 2F 18 89                                                 DEW     R3
8246 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       (R3) = R1
                                                      
8247 15 10 89                                         _ST16:  LDA     R1.0
824A 1E 18 89                                                 STR     R3
824D 2E 18 89                                                 INW     R3
8250 15 11 89                                                 LDA     R1.1
8253 1E 18 89                                                 STR     R3
8256 2F 18 89                                                 DEW     R3
8259 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1.0 = R1.0 & R2.0
                                                      
825A 0E 08                                            _AND8:  LDI     8               ; Load bit counter
825C 16 1C 89                                                 STA     BC              ; :
825F 15 14 89                                         _AND81: LDA     R2.0            ; Load second operand
8262 05                                                       LSL                     ; Shift 2b7 into C
8263 16 14 89                                                 STA     R2.0            ; Store shifted second operand
8266 15 10 89                                                 LDA     R1.0            ; Load first operand
8269 3C 72 82                                                 BCC     _AND82          ; If C is clear: Shift in a zero
                                                              ; 2b7 is set
826C 11 00                                                    CPI     0               ; Is first operand < 0, i.e. is 1b7 set?
826E 3F 72 82                                                 BMI     _AND82           ; N is set: 1b7 is set
                                                              ; 1b7 is clear
8271 03                                                       CLC                     ; 1b7 is clear: Clear C
8272 06                                               _AND82: ROL                     ; Shift C into result
8273 16 10 89                                                 STA     R1.0            ; Store first operand/result
8276 27 1C 89                                                 DEB     BC              ; All bits done?
8279 3A 5F 82                                                 BNE     _AND81          ;   NO: Do one more
827C 39                                                       RTS                     ;   YES: All done
                                                      
                                                      ; ------------------------------
                                                      ;       R1.0 = R1.0 | R2.0
                                                      
827D 0E 08                                            _OR8:   LDI     8               ; Load bit counter
827F 16 1C 89                                                 STA     BC              ; :
8282 15 14 89                                         _OR810: LDA     R2.0            ; Load second operand
8285 05                                                       LSL                     ; Shift 2b7 into C
8286 16 14 89                                                 STA     R2.0            ; Store shifted second operand
8289 15 10 89                                                 LDA     R1.0            ; Load first operand
828C 3D 95 82                                                 BCS     _OR820          ; If C is set, shift it into result
                                                              ; 2b7 is clear
828F 11 00                                                    CPI     0               ; Is first operand < 0, i.e. is 1b7 set?
8291 3F 95 82                                                 BMI     _OR820          ; N is clear: 1b7 is clear
                                                              ; 1b7 is clear
8294 03                                                       CLC                     ; Neither bit is set: Clear C 
8295 06                                               _OR820: ROL                     ; Shift C into result
8296 16 10 89                                                 STA     R1.0            ; Store first operand/result
8299 27 1C 89                                                 DEB     BC              ; All bits done?
829C 3A 82 82                                                 BNE     _OR810          ;   NO: Do one more
829F 39                                                       RTS                     ;   YES: All done
                                                      
                                                      ; ------------------------------
                                                      ;       R1.0 = R1.0 ^ R2.0
                                                      
82A0 0E 08                                            _XOR8:  LDI     8               ; Load bit counter
82A2 16 1C 89                                                 STA     BC              ; :
82A5 15 14 89                                         _XOR81: LDA     R2.0            ; Get second operand
82A8 05                                                       LSL                     ; Shift b7 into C
82A9 16 14 89                                                 STA     R2.0            ; Store shifted second operand
82AC 15 10 89                                                 LDA     R1.0            ; Load first operand
82AF 3D BA 82                                                 BCS     _XOR82          ; C is set, check 1b7 for zero
                                                              ; 2b7 is clear
82B2 11 00                                                    CPI     0               ; Is first operand < 0, i.e. is b7 set?
82B4 3F C0 82                                                 BMI     _XOR84          ; 1b7 is set and 2b7 is clear, shift in C which is set
82B7 14 BF 82                                                 JPA     _XOR83          ; 1b7 and 2b7 are both zero, clear C and shift in 
                                                              ; 2b7 is set, check 1b7 for zero
82BA 11 00                                            _XOR82: CPI     0
82BC 3E C0 82                                                 BPL     _XOR84          ; If 1b7 is zero, shift in C which is set
82BF 03                                               _XOR83: CLC                     ; 1b7 and 2b7 are equal, shift in a zero
82C0 06                                               _XOR84: ROL                     ; Shift whatever is in C into result
82C1 16 10 89                                                 STA     R1.0            ; Store first operand/result
82C4 27 1C 89                                                 DEB     BC              ; All bits done?
82C7 3A A5 82                                                 BNE     _XOR81          ;   NO: Do one more
82CA 39                                                       RTS                     ;   YES: All done
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = ~R1
                                                      
82CB 15 13 89                                         _NOT32: LDA     R1.3            ; Negate MSB
82CE 0B                                                       NEG                     ; Two-complement negation
82CF 10 01                                                    SBI     1               ; Adjust to bitwise not
82D1 16 13 89                                                 STA     R1.3            ; Store negated MSB
82D4 15 12 89                                                 LDA     R1.2            ; Negate byte2
82D7 0B                                                       NEG                     ; Two-complement negation
82D8 10 01                                                    SBI     1               ; Adjust to bitwise not
82DA 16 12 89                                                 STA     R1.2            ; Store negated byte2
82DD 15 11 89                                         _NOT16: LDA     R1.1            ; Negate byte1
82E0 0B                                                       NEG                     ; Two-complement negation
82E1 10 01                                                    SBI     1               ; Adjust to bitwise not
82E3 16 11 89                                                 STA     R1.1            ; Store negated byte1
82E6 15 10 89                                                 LDA     R1.0            ; Negate LSB
82E9 0B                                                       NEG                     ; Two-complement negation
82EA 10 01                                                    SBI     1               ; Adjust to bitwise not
82EC 16 10 89                                                 STA     R1.0            ; Store negated LSB
82EF 39                                                       RTS                     ; Done
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = -R1
                                                      
82F0 38 DD 82                                         _NEG16: JPS     _NOT16          ; Bitwise NOT R1
82F3 0E 01                                                    LDI     1               ; Add one to make it 2-complement
82F5 28 10 89                                                 ADB     R1.0            ; :
82F8 0E 00                                                    LDI     0               ; :
82FA 2A 11 89                                                 ACB     R1.1            ; :
82FD 39                                                       RTS                     ; Done
                                                      
                                                      ; ------------------------------
                                                      ;       R1X = -R1X
                                                      
82FE 38 CB 82                                         _NEG32: JPS     _NOT32          ; Bitwise NOT R1X
8301 0E 01                                                    LDI     1               ; Add one to make it 2-complement
8303 28 10 89                                                 ADB     R1.0            ; :
8306 0D                                                       DEC                     ; :
8307 2A 11 89                                                 ACB     R1.1            ; :
830A 2A 12 89                                                 ACB     R1.2            ; :
830D 2A 13 89                                                 ACB     R1.3            ; :
8310 39                                                       RTS                     ; Done
                                                      
                                                      ; ------------------------------
                                                      ;       R1 <-> R2
                                                      
8311 38 71 81                                         _XCH16: JPS     _PUSH1          ; Temp = R1
8314 15 14 89                                                 LDA     R2.0            ; R1 = R2
8317 16 10 89                                                 STA     R1.0            ; :
831A 15 15 89                                                 LDA     R2.1            ; :
831D 16 11 89                                                 STA     R1.1            ; :
8320 38 B6 80                                                 JPS     _POP2           ; R2 = Temp
8323 39                                                       RTS                     ; Done
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = (R1)
                                                      
8324 1D 10 89                                         _AT:    LDR     R1              ; Get LSB
8327 16 12 89                                                 STA     R1.2            ; ... Store temp
832A 2E 10 89                                                 INW     R1              ; Bump
832D 1D 10 89                                                 LDR     R1              ; Get MSB
8330 16 13 89                                                 STA     R1.3            ; ... Store temp
8333 15 12 89                                                 LDA     R1.2            ; Get temp LSB
8336 16 10 89                                                 STA     R1.0            ; ... Store
8339 15 13 89                                                 LDA     R1.3            ; Get temp MSB
833C 16 11 89                                                 STA     R1.1            ; ... Store
833F 39                                                       RTS                     ; Done
                                                      
                                                      ; ------------------------------
                                                      ;       "HALT"
                                                      
8340 42 83                                            _HALT:  DW      _HALT0
8342 14 42 83                                         _HALT0: JPA     _HALT0
                                                      
                                                      ; ------------------------------
                                                      ;       +ORIGIN
                                                      ; NOTE: Index number in R2
                                                      
8345 0E 00                                            _PORIG: LDI     <ORIGIN         ; R1 = ORIGIN address
8347 16 10 89                                                 STA     R1.0            ; :
834A 0E 80                                                    LDI     >ORIGIN         ; :
834C 16 11 89                                                 STA     R1.1            ; :
834F 15 14 89                                                 LDA     R2.0            ; Get index number
8352 30 10 89                                                 ADW     R1              ; Compute addr
8355 39                                                       RTS                     ; Done
                                                      
                                                      ; ------------------------------
                                                      ;       _USER
                                                      ; NOTE: Index number in R2
                                                      
8356 15 08 89                                         _USER:  LDA     UP.0            ; R1 = UP
8359 16 10 89                                                 STA     R1.0            ; :
835C 15 09 89                                                 LDA     UP.1            ; :
835F 16 11 89                                                 STA     R1.1            ; :
8362 15 14 89                                                 LDA     R2.0            ; Get index number
8365 30 10 89                                                 ADW     R1              ; Compute addr
8368 39                                                       RTS                     ; Done
                                                      
                                                      ; ------------------------------
                                                      ;       _SWAP8
                                                      ; Swaps R1.1 <-> R1.0
                                                      ;       R2.1 <-> R2.0
                                                      
8369 15 10 89                                         _SWAP8: LDA     R1.0
836C 16 1D 89                                                 STA     TMP
836F 15 11 89                                                 LDA     R1.1
8372 16 10 89                                                 STA     R1.0
8375 15 1D 89                                                 LDA     TMP
8378 16 11 89                                                 STA     R1.1
837B 15 14 89                                                 LDA     R2.0
837E 16 1D 89                                                 STA     TMP
8381 15 15 89                                                 LDA     R2.1
8384 16 14 89                                                 STA     R2.0
8387 15 1D 89                                                 LDA     TMP
838A 16 15 89                                                 STA     R2.1
838D 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = R1 & R2
                                                      
838E 38 5A 82                                         _AND16: JPS     _AND8
8391 38 69 83                                                 JPS     _SWAP8
8394 38 5A 82                                                 JPS     _AND8
8397 38 69 83                                                 JPS     _SWAP8
839A 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = R1 | R2
                                                      
839B 38 7D 82                                         _OR16:  JPS     _OR8
839E 38 69 83                                                 JPS     _SWAP8
83A1 38 7D 82                                                 JPS     _OR8
83A4 38 69 83                                                 JPS     _SWAP8
83A7 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1 = R1 ^ R2
                                                      
83A8 38 A0 82                                         _XOR16: JPS     _XOR8
83AB 38 69 83                                                 JPS     _SWAP8
83AE 38 A0 82                                                 JPS     _XOR8
83B1 38 69 83                                                 JPS     _SWAP8
83B4 39                                                       RTS
                                                      
                                                      ; ------------------------------
                                                      ;       R1X = R1X * R2X
                                                      
83B5 0E 00                                            _UMULT: LDI     0               ; R1H = 0
83B7 16 12 89                                                 STA     R1.2
83BA 16 13 89                                                 STA     R1.3
83BD 16 16 89                                                 STA     R2.2            ; R2H = 0
83C0 16 17 89                                                 STA     R2.3
83C3 16 1A 89                                                 STA     R3.2            ; R3H = 0
83C6 16 1B 89                                                 STA     R3.3
                                                      
83C9 15 10 89                                                 LDA     R1.0            ; R3L = R1L
83CC 16 18 89                                                 STA     R3.0
83CF 15 11 89                                                 LDA     R1.1
83D2 16 19 89                                                 STA     R3.1
                                                      
83D5 0E 00                                                    LDI     0               ; R1L = 0
83D7 16 10 89                                                 STA     R1.0
83DA 16 11 89                                                 STA     R1.1
                                                      
83DD 0E 10                                                    LDI     16              ; Set bit counter
83DF 16 1C 89                                                 STA     BC
                                                      
83E2 15 19 89                                         _UMU10: LDA     R3.1            ; R3L = R3L >> 1
83E5 07                                                       LSR
83E6 16 19 89                                                 STA     R3.1
83E9 15 18 89                                                 LDA     R3.0
83EC 08                                                       ROR
83ED 16 18 89                                                 STA     R3.0
83F0 3C F6 83                                                 BCC     _UMU20
                                                      
83F3 38 1B 82                                                 JPS     _ADD32          ; R1X = R1X + R2X
                                                      
83F6 15 14 89                                         _UMU20: LDA     R2.0            ; R2X = R2X << 1
83F9 05                                                       LSL
83FA 16 14 89                                                 STA     R2.0
83FD 15 15 89                                                 LDA     R2.1
8400 06                                                       ROL
8401 16 15 89                                                 STA     R2.1
8404 15 16 89                                                 LDA     R2.2
8407 06                                                       ROL
8408 16 16 89                                                 STA     R2.2
840B 15 17 89                                                 LDA     R2.3
840E 06                                                       ROL
840F 16 17 89                                                 STA     R2.3
                                                      
8412 27 1C 89                                                 DEB     BC
8415 3A E2 83                                                 BNE     _UMU10
8418 39                                                       RTS
                                                      
                                                      ; INCLUDE         inner.asm
                                                      
                                                      ; ----------------------------------------------------------------------
                                                      ; INNER INTERPRETER
                                                      
8419 2F 04 89                                         PUSH:   DEW     SP              ; -(SP) = R1
841C 15 11 89                                                 LDA     R1.1
841F 1E 04 89                                                 STR     SP
8422 2F 04 89                                                 DEW     SP
8425 15 10 89                                                 LDA     R1.0
8428 1E 04 89                                                 STR     SP
842B 1D 00 89                                         NEXT:   LDR     IP              ; WA = (IP)+
842E 16 02 89                                                 STA     WA.0
8431 2E 00 89                                                 INW     IP
8434 1D 00 89                                                 LDR     IP
8437 16 03 89                                                 STA     WA.1
843A 2E 00 89                                                 INW     IP
843D 1D 02 89                                         NEXT10: LDR     WA              ; R1 = (WA)+
8440 16 10 89                                                 STA     R1.0
8443 2E 02 89                                                 INW     WA
8446 1D 02 89                                                 LDR     WA
8449 16 11 89                                                 STA     R1.1
844C 2E 02 89                                                 INW     WA
844F 1C 10 89                                                 JPR     R1              ; jump @(R1)
                                                      
                                                      ; ------------------------------
                                                      ;       Push TRUE and FALSE
                                                      
8452 2C 10 89                                         PUSHT:  CLW     R1              ; A zero
8455 2F 10 89                                                 DEW     R1              ; Make it into a -1 i.e. TRUE flag
8458 14 19 84                                                 JPA     PUSH
                                                      
845B 2C 10 89                                         PUSHF:  CLW     R1              ; A zero
845E 14 19 84                                                 JPA     PUSH
                                                      
                                                      ; ------------------------------
                                                      ;       Push R1X, MSB as TOS
                                                      
                                                      DPUSH:
8461 2F 04 89                                                 DEW     SP              ; -(SP) = R1X
8464 15 11 89                                                 LDA     R1.1
8467 1E 04 89                                                 STR     SP
846A 2F 04 89                                                 DEW     SP
846D 15 10 89                                                 LDA     R1.0
8470 1E 04 89                                                 STR     SP
8473 2F 04 89                                                 DEW     SP
8476 15 13 89                                                 LDA     R1.3
8479 1E 04 89                                                 STR     SP
847C 2F 04 89                                                 DEW     SP
847F 15 12 89                                                 LDA     R1.2
8482 1E 04 89                                                 STR     SP
8485 14 2B 84                                                 JPA     NEXT
                                                      
                                                      ; INCLUDE         primaries.asm
                                                      
                                                      ; ----------------------------------------------------------------------
                                                      ; FORTH PRIMARIES
                                                      ;
                                                      
8488 83 4C 49 D4                                      HLIT:   DB      ^3 "LI" ^'T'                            ; ***** LIT
848C 00 00                                                    DW      0
848E 90 84                                            LIT:    DW      LIT0
8490 38 2A 80                                         LIT0:   JPS     _LIT            ; R1 = (IP)+
8493 14 19 84                                                 JPA     PUSH            ; -(SP) = R1; NEXT
                                                      
8496 87 45 58 45 43 55 54 C5                          HEXEC:  DB      ^7 "EXECUT" ^'E'                        ; ***** EXECUTE
849E 88 84                                                    DW      HLIT
84A0 A2 84                                            EXEC:   DW      EXEC0
84A2 1D 04 89                                         EXEC0:  LDR     SP              ; WA = (SP)+
84A5 16 02 89                                                 STA     WA.0
84A8 2E 04 89                                                 INW     SP
84AB 1D 04 89                                                 LDR     SP
84AE 16 03 89                                                 STA     WA.1
84B1 2E 04 89                                                 INW     SP
84B4 14 3D 84                                                 JPA     NEXT10          ; jump @(WA)+
                                                      
84B7 86 42 52 41 4E 43 C8                             HBRAN:  DB      ^6 "BRANC" ^'H'                         ; ***** BRANCH
84BE 96 84                                                    DW      HEXEC
84C0 C2 84                                            BRAN:   DW      BRAN0
84C2 38 3D 80                                         BRAN0:  JPS     _BRAN           ; IP = IP + (IP)
84C5 14 2B 84                                                 JPA     NEXT
                                                      
84C8 87 30 42 52 41 4E 43 C8                          HZBRAN: DB      ^7 "0BRANC" ^'H'                        ; ***** 0BRANCH
84D0 B7 84                                                    DW      HBRAN
84D2 D4 84                                            ZBRAN:  DW      ZBRAN0
84D4 1D 04 89                                         ZBRAN0: LDR     SP
84D7 11 00                                                    CPI     0               ; Low byte non-zero?
84D9 3A ED 84                                                 BNE     ZBRA10          ; YES: Do not branch
84DC 2E 04 89                                                 INW     SP
84DF 1D 04 89                                                 LDR     SP
84E2 11 00                                                    CPI     0               ; High byte non-zero?
84E4 3A F0 84                                                 BNE     ZBRA20          ; YES: Do not branch
84E7 2E 04 89                                                 INW     SP
84EA 14 C2 84                                                 JPA     BRAN0           ; IP = IP + (IP); NEXT
84ED 2E 04 89                                         ZBRA10: INW     SP
84F0 2E 04 89                                         ZBRA20: INW     SP
84F3 2E 00 89                                                 INW     IP              ; Just skip jump offset
84F6 2E 00 89                                                 INW     IP
84F9 14 2B 84                                                 JPA     NEXT
                                                      
84FC 87 28 2B 4C 4F 4F 50 A9                          HXPLOO: DB      ^7 "(+LOOP" ^')'                        ; ***** (+LOOP)
8504 C8 84                                                    DW      HZBRAN
8506 08 85                                            XPLOO:  DW      XPLOO0
8508 38 AF 80                                         XPLOO0: JPS     _GET2           ; R2 = (SP) [only copying increment]
850B 38 17 81                                                 JPS     _RPOP1          ; R1 = (RP)+
850E 38 0E 82                                                 JPS     _ADD16          ; R1 = counter'
8511 38 2E 81                                                 JPS     _RGET2          ; R2 = limit
8514 38 CB 81                                                 JPS     _RPUSH1         ; -(RP) = R1'
8517 38 F9 80                                                 JPS     _POP3           ; R3 = (SP)+ [now popping incr]
851A 15 19 89                                                 LDA     R3.1            ; Is increment negative?
851D 11 00                                                    CPI     0               ; :
851F 3E 25 85                                                 BPL     XPLO10
                                                              ; Handle negative increment
8522 38 11 83                                                 JPS     _XCH16          ; R1 <-> R2
                                                              ; Compare counter to limit
8525 15 11 89                                         XPLO10: LDA     R1.1            ; Compare MSB
8528 19 15 89                                                 CPA     R2.1            ; :
852B 3F C2 84                                                 BMI     BRAN0           ; R2 is greater, continue looping
852E 3B 34 85                                                 BEQ     XPLO20          ; MSBs are equal, check LSBs
8531 14 3D 85                                                 JPA     XPLO30          ; R1 is greater, stop looping
                                                              ; MSBs are equal
8534 15 10 89                                         XPLO20: LDA     R1.0            ; Compare LSB
8537 19 14 89                                                 CPA     R2.0            
853A 3F C2 84                                                 BMI     BRAN0           ; R2 is greater, continue looping
                                                              ; Limit reached, cleanup rstack and stop looping
853D 0E 04                                            XPLO30: LDI     4               ; Drop loop counter ...
853F 30 06 89                                                 ADW     RP              ; ... and loop limit
8542 0E 02                                                    LDI     2               ; Skip branch offset
8544 30 00 89                                                 ADW     IP              ; :
8547 14 2B 84                                                 JPA     NEXT
                                                      
854A 86 28 4C 4F 4F 50 A9                             HXLOOP: DB      ^6 "(LOOP" ^')'                         ; ***** (LOOP)
8551 FC 84                                                    DW      HXPLOO
8553 55 85                                            XLOOP:  DW      XLOOP0
8555 2C 10 89                                         XLOOP0: CLW     R1              ; Push a one
8558 2E 10 89                                                 INW     R1              ; :
855B 38 71 81                                                 JPS     _PUSH1          ; :
855E 14 08 85                                                 JPA     XPLOO0          ; (+LOOP)
                                                      
8561 84 28 44 4F A9                                   HXDO:   DB      ^4 "(DO" ^')'                           ; ***** (DO)
8566 4A 85                                                    DW      HXLOOP
8568 6A 85                                            XDO:    DW      XDO0
856A 38 73 80                                         XDO0:   JPS     _POP1           ; Loop counter
856D 38 B6 80                                                 JPS     _POP2           ; Limit
8570 38 E9 81                                                 JPS     _RPUSH2         ; Push limit onto rstack
8573 38 CB 81                                                 JPS     _RPUSH1         ; Push loop counter onto rstack
8576 14 2B 84                                                 JPA     NEXT
                                                      
8579 81 C9                                            HI:     DB      ^1 ^'I'                                 ; ***** I
857B 61 85                                                    DW      HXDO
857D 7F 85                                            I:      DW      I0
857F 38 10 81                                         I0:     JPS     _RGET1          ; Get loop counter
8582 38 71 81                                                 JPS     _PUSH1          ; Push it onto dstack
8585 14 2B 84                                                 JPA     NEXT
                                                      
8588 85 44 49 47 49 D4                                HDIGIT: DB      ^5 "DIGI" ^'T'                          ; ***** DIGIT
858E 79 85                                                    DW      HI
8590 92 85                                            DIGIT:  DW      DIGIT0
8592 38 B6 80                                         DIGIT0: JPS     _POP2           ; Get base into R2.0
8595 38 73 80                                                 JPS     _POP1           ; Get character into R1.0
8598 15 10 89                                                 LDA     R1.0            ; Get character into A
859B 10 30                                                    SBI     '0'             ; Assume '0' - '9'
859D 3F B9 85                                                 BMI     DIGI88          ; Oops! Negative
85A0 11 0A                                                    CPI     10              ; Greater than 9?
85A2 3F A7 85                                                 BMI     DIGI10          ; No, it is 0 - 9
                                                              ; 'A' - 'Z' case
85A5 10 07                                                    SBI     7               ; ch -= ('A' - '0') + 10
85A7 19 14 89                                         DIGI10: CPA     R2.0            ; Greater than base?
85AA 3F B0 85                                                 BMI     DIGI77
85AD 14 B9 85                                                 JPA     DIGI88
85B0 16 10 89                                         DIGI77: STA     R1.0            ; Store binary value
85B3 38 71 81                                                 JPS     _PUSH1          ; Push the value
85B6 14 52 84                                                 JPA     PUSHT           ; Push TRUE; NEXT
85B9 14 5B 84                                         DIGI88: JPA     PUSHF           ; Push FALSE; NEXT
                                                      
85BC 86 28 46 49 4E 44 A9                             HPFIND: DB      ^6 "(FIND" ^')'                         ; ***** (FIND)
85C3 88 85                                                    DW      HDIGIT
85C5 C7 85                                            PFIND:  DW      PFIND0
85C7 38 73 80                                         PFIND0: JPS     _POP1           ; NFA
85CA 38 F9 80                                                 JPS     _POP3           ; String address
85CD 15 18 89                                         PFIN10: LDA     R3.0            ; R2 = R3 (string address)
85D0 16 14 89                                                 STA     R2.0            ; :
85D3 15 19 89                                                 LDA     R3.1            ; :
85D6 16 15 89                                                 STA     R2.1            ; :
                                                              ; Fast comparison of length bytes
85D9 1D 10 89                                                 LDR     R1              ; Get lByte
85DC 16 12 89                                                 STA     R1.2            ; ... Store as potential result
85DF 05                                                       LSL                     ; lByte &= 0x3F
85E0 05                                                       LSL                     ; :
85E1 07                                                       LSR                     ; :
85E2 07                                                       LSR                     ; :
85E3 16 16 89                                                 STA     R2.2            ; R2.2 is counter for string match
85E6 21 14 89                                                 CPR     R2              ; lByte == string length?
85E9 3A 08 86                                                 BNE     PFIN25
                                                              ; Length bytes match, check names
85EC 2E 10 89                                         PFIN20: INW     R1              ; Bump pointers
85EF 2E 14 89                                                 INW     R2              ; :
85F2 1D 10 89                                                 LDR     R1              ; Get char from dictionary
85F5 05                                                       LSL                     ; char &= 0x7F
85F6 07                                                       LSR
85F7 21 14 89                                                 CPR     R2              ; Is it a match with search string?
85FA 3A 0B 86                                                 BNE     PFIN30          ; NO: Look at next header in dictionary
85FD 27 16 89                                                 DEB     R2.2            ; Decrement character counter
8600 11 00                                                    CPI     0               ; :
8602 3B 2C 86                                                 BEQ     PFIN77          ; YES: This is the word we are looking for
8605 14 EC 85                                                 JPA     PFIN20          ; Match so far, try next char
                                                              ; Step to next header in dictionary
8608 2E 10 89                                         PFIN25: INW     R1              ; Bump NFA pointer to actual characters
860B 2E 10 89                                         PFIN30: INW     R1              ; Bump NFA pointer
860E 27 16 89                                                 DEB     R2.2            ; Decrement character counter
8611 11 00                                                    CPI     0               ; End of name field?
8613 3A 0B 86                                                 BNE     PFIN30          ; NO: Step to next char
8616 38 24 83                                                 JPS     _AT             ; R1 = (R1)
8619 15 11 89                                                 LDA     R1.1            ; At end of dictionary?
861C 11 00                                                    CPI     0               ; :
861E 3A CD 85                                                 BNE     PFIN10          ; NO: Try this word for match
8621 15 10 89                                                 LDA     R1.0            ; :
8624 11 00                                                    CPI     0               ; :
8626 3A CD 85                                                 BNE     PFIN10          ; NO: Try this word for match
                                                              ; Word not found, return a single FALSE
8629 14 5B 84                                         PFIN88: JPA     PUSHF           ; Done
                                                              ; Word found, return PFA, lByte, TRUE
862C 0E 05                                            PFIN77: LDI     5               ; Bump ptr to PFA
862E 30 10 89                                                 ADW     R1              ; :
8631 38 71 81                                                 JPS     _PUSH1          ; Push PFA
8634 15 12 89                                                 LDA     R1.2            ; Get stored length byte
8637 16 10 89                                                 STA     R1.0            ; :
863A 24 11 89                                                 CLB     R1.1            ; Clear MSB
863D 38 71 81                                                 JPS     _PUSH1          ; Push length byte
8640 14 52 84                                                 JPA     PUSHT           ; Done
                                                      
8643 87 45 4E 43 4C 4F 53 C5                          HENCL:  DB      ^7 "ENCLOS" ^'E'                        ; ***** ENCLOSE
864B BC 85                                                    DW      HPFIND
864D 4F 86                                            ENCL:   DW      ENCL0
864F 38 F9 80                                         ENCL0:  JPS     _POP3           ; Get delimiter char
8652 38 6C 80                                                 JPS     _GET1           ; Get addr of input
8655 2C 14 89                                                 CLW     R2              ; Initialize char index
                                                              ; Scan preceeding delimiters
8658 1D 10 89                                         ENCL10: LDR     R1              ; Get char from input
865B 11 00                                                    CPI     0               ; Is it <NUL>?
865D 3B 95 86                                                 BEQ     ENCL50          ; YES: <NUL> before first non-delimiter
8660 19 18 89                                                 CPA     R3.0            ; Is it a delimiter?
8663 3A 6F 86                                                 BNE     ENCL20          ; NO: We have the start of next token
8666 2E 10 89                                                 INW     R1              ; Bump to next char ...
8669 26 14 89                                                 INB     R2.0            ; ... also increase index
866C 14 58 86                                                 JPA     ENCL10          ; Go back to look at next char
                                                              ; Start of token
866F 38 8F 81                                         ENCL20: JPS     _PUSH2          ; Push result n1 (first char of token)
8672 1D 10 89                                         ENCL30: LDR     R1              ; Get char from input
8675 11 00                                                    CPI     0               ; Is it <NUL>?
8677 3B A4 86                                                 BEQ     ENCL60          ; YES: <NUL> found
867A 19 18 89                                                 CPA     R3.0            ; Is it a delimiter?
867D 3B 89 86                                                 BEQ     ENCL40          ; YES: We have the end of the token
8680 2E 10 89                                                 INW     R1              ; Bump to next char ...
8683 26 14 89                                                 INB     R2.0            ; ... also increase index
8686 14 72 86                                                 JPA     ENCL30          ; Go back to look at next char
                                                              ; End of token
8689 38 8F 81                                         ENCL40: JPS     _PUSH2          ; Push result n2 (ending delimiter)
868C 26 14 89                                                 INB     R2.0            ; Also push n3 ...
868F 38 8F 81                                                 JPS     _PUSH2          ; : ... (index to first non-scanned char)
8692 14 2B 84                                                 JPA     NEXT            ; Done
                                                              ; <NUL> appears before token
8695 26 14 89                                         ENCL50: INB     R2.0            ; Push i + 1
8698 38 8F 81                                                 JPS     _PUSH2          ; :
869B 27 14 89                                                 DEB     R2.0            ; Push i
869E 38 8F 81                                                 JPS     _PUSH2          ; : ... indicating <NUL> before token
86A1 14 2B 84                                                 JPA     NEXT            ; Done
                                                              ; Token ends with a <NUL>
86A4 38 8F 81                                         ENCL60: JPS     _PUSH2          ; Push i twice to indicate ...
86A7 38 8F 81                                                 JPS     _PUSH2          ; : ... that token ends in a <NUL>
86AA 14 2B 84                                                 JPA     NEXT            ; Done
                                                      
86AD 84 45 4D 49 D4                                   HEMIT:  DB      ^4 "EMI" ^'T'                           ; ***** EMIT
86B2 43 86                                                    DW      HENCL
86B4 B6 86                                            EMIT:   DW      EMIT0
86B6 38 73 80                                         EMIT0:  JPS     _POP1           ; Get character
86B9 15 10 89                                                 LDA     R1.0            ; Send char to terminal
86BC 02                                                       OUT                     ;
86BD 14 2B 84                                                 JPA     NEXT            ; Done
                                                      
86C0 83 4B 45 D9                                      HKEY:   DB      ^3 "KE" ^'Y'                            ; ***** KEY
86C4 AD 86                                                    DW      HEMIT
86C6 C8 86                                            KEY:    DW      KEY0
86C8 0A                                               KEY0:   INP                     ; Get char form terminal
86C9 11 FF                                                    CPI     0xFF            ; Did we get a character?
86CB 3B C8 86                                                 BEQ     KEY0            ; NO: Try again
86CE 16 10 89                                                 STA     R1.0            ; YES: Push character
86D1 24 11 89                                                 CLB     R1.1            ; :
86D4 14 19 84                                                 JPA     PUSH            ; Push R1; NEXT
                                                      
86D7 89 3F 54 45 52 4D 49 4E 41 CC                    HQTERM: DB      ^9 "?TERMINA" ^'L'                      ; ***** ?TERMINAL
86E1 C0 86                                                    DW      HKEY
86E3 E5 86                                            QTERM:  DW      QTERM0
86E5 2C 10 89                                         QTERM0: CLW     R1              ; Default FALSE to return
86E8 0A                                                       INP                     ; Get char from terminal
86E9 11 FF                                                    CPI     0xFF            ; Did we get a character?
86EB 3B F1 86                                                 BEQ     QTER10          ; NO: Return FALSE
86EE 2F 10 89                                                 DEW     R1              ; Make default FALSE into TRUE
86F1 14 19 84                                         QTER10: JPA     PUSH            ; Push R1; NEXT
                                                      
86F4 82 43 D2                                         HCR:    DB      ^2 "C" ^'R'                             ; ***** CR
86F7 D7 86                                                    DW      HQTERM
86F9 FB 86                                            CR:     DW      CR0
86FB 0E 0A                                            CR0:    LDI     CH_LF           ; Output a linefeed ...
86FD 02                                                       OUT                     ; ... to the terminal
86FE 14 2B 84                                                 JPA     NEXT            ; Done
                                                      
8701 85 43 4D 4F 56 C5                                HCMOVE: DB      ^5 "CMOV" ^'E'                          ; ***** CMOVE
8707 F4 86                                                    DW      HCR
8709 0B 87                                            CMOVE:  DW      CMOVE0
870B 38 F9 80                                         CMOVE0: JPS     _POP3           ; count
870E 38 B6 80                                                 JPS     _POP2           ; destination
8711 38 73 80                                                 JPS     _POP1           ; source
8714 1D 10 89                                         CMOV10: LDR     R1              ; Get byte from source
8717 1E 14 89                                                 STR     R2              ; Store to destination
871A 2E 10 89                                                 INW     R1              ; Bump source pointer
871D 2E 14 89                                                 INW     R2              ; Bump destination pointer
8720 2F 18 89                                                 DEW     R3              ; Decrement count
8723 3B 29 87                                                 BEQ     CMOV20          ; Count zero: We are done
8726 14 14 87                                                 JPA     CMOV10          ; Count non-zero: Next byte
8729 14 2B 84                                         CMOV20: JPA     NEXT            ; Done
                                                      
872C 82 55 AA                                         HUSTAR: DB      ^2 "U" ^'*'                             ; ***** U*
872F 01 87                                                    DW      HCMOVE
8731 33 87                                            USTAR:  DW      USTAR0
8733 38 B6 80                                         USTAR0: JPS     _POP2           ; Get second operand
8736 38 73 80                                                 JPS     _POP1           ; Get first operand
8739 38 B5 83                                                 JPS     _UMULT          ; u32 = u16 * u16
873C 14 61 84                                                 JPA     DPUSH           ; Done
                                                      
873F 82 55 AF                                         HUSLAS: DB      ^2 "U" ^'/'                             ; ***** U/
8742 2C 87                                                    DW      HUSTAR
8744 46 87                                            USLAS:  DW      USLAS0
8746 38 B6 80                                         USLAS0: JPS     _POP2           ; divisor
8749 38 73 80                                                 JPS     _POP1           ; dividend, high 16b
874C 15 10 89                                                 LDA     R1.0            ; Move high part to R1.2 and R1.3
874F 16 12 89                                                 STA     R1.2            ; :
8752 15 11 89                                                 LDA     R1.1            ; :
8755 16 13 89                                                 STA     R1.3            ; :
8758 38 73 80                                                 JPS     _POP1           ; dividend, low 16b
875B 38 00 00                                                 JPS     _UDIV           ; u32 / u16 --> quot_u16, rem_u16
875E 14 61 84                                                 JPA     DPUSH           ; Done
                                                      
8761 83 41 4E C4                                      HAND:   DB      ^3 "AN" ^'D'                            ; ***** AND
8765 3F 87                                                    DW      HUSLAS
8767 69 87                                            AND:    DW      AND0
8769 38 B6 80                                         AND0:   JPS     _POP2           ; Get second operand
876C 38 73 80                                                 JPS     _POP1           ; Get first operand
876F 38 8E 83                                                 JPS     _AND16          ; R1 = R1 & R2
8772 14 19 84                                                 JPA     PUSH            ; Done
                                                      
8775 82 4F D2                                         HOR:    DB      ^2 "O" ^'R'                             ; ***** OR
8778 61 87                                                    DW      HAND
877A 7C 87                                            OR:     DW      OR0
877C 38 B6 80                                         OR0:    JPS     _POP2           ; Get second operand
877F 38 73 80                                                 JPS     _POP1           ; Get first operand
8782 38 9B 83                                                 JPS     _OR16           ; R1 = R1 | R2
8785 14 19 84                                                 JPA     PUSH            ; Done
                                                      
8788 83 58 4F D2                                      HXOR:   DB      ^3 "XO" ^'R'                            ; ***** XOR
878C 75 87                                                    DW      HOR
878E 90 87                                            XOR:    DW      XOR0
8790 38 B6 80                                         XOR0:   JPS     _POP2           ; Get second operand
8793 38 73 80                                                 JPS     _POP1           ; Get first operand
8796 38 A8 83                                                 JPS     _XOR16          ; R1 = R1 ^ R2
8799 14 19 84                                                 JPA     PUSH            ; Done
                                                      
879C 83 53 50 C0                                      HSPAT:  DB      ^3 "SP" ^'@'                            ; ***** SP@
87A0 88 87                                                    DW      HXOR
87A2 A4 87                                            SPAT:   DW      SPAT0
87A4 15 04 89                                         SPAT0:  LDA     SP.0            ; Get stack pointer
87A7 16 10 89                                                 STA     R1.0            ; : into R1
87AA 15 05 89                                                 LDA     SP.1            ; :
87AD 16 11 89                                                 STA     R1.1            ; :
87B0 14 19 84                                                 JPA     PUSH            ; Push R1; NEXT
                                                      
87B3 83 53 50 A1                                      HSPSTO: DB      ^3 "SP" ^'!'                            ; ***** SP!
87B7 9C 87                                                    DW      HSPAT
87B9 BB 87                                            SPSTO:  DW      SPSTO0
87BB 0E 06                                            SPSTO0: LDI     6               ; Index of SP0
87BD 16 14 89                                                 STA     R2.0            ; : in USER table
87C0 38 56 83                                                 JPS     _USER           ; R1 = &USER[R2]
87C3 38 24 83                                                 JPS     _AT             ; R1 = (R1)
87C6 15 10 89                                                 LDA     R1.0            ; SP = R1
87C9 16 04 89                                                 STA     SP.0            ; :
87CC 15 11 89                                                 LDA     R1.1            ; :
87CF 16 05 89                                                 STA     SP.1            ; :
87D2 14 2B 84                                                 JPA     NEXT            ; Done
                                                      
87D5 83 52 50 A1                                      HRPSTO: DB      ^3 "RP" ^'!'                            ; ***** RP!
87D9 B3 87                                                    DW      HSPSTO
87DB DD 87                                            RPSTO:  DW      RPSTO0
87DD 0E 18                                            RPSTO0: LDI     24              ; Index of SP0
87DF 16 14 89                                                 STA     R2.0            ; : in boot table
87E2 38 45 83                                                 JPS     _PORIG          ; R1 = &bootTable[R2]
87E5 38 24 83                                                 JPS     _AT             ; R1 = XRP
87E8 15 10 89                                                 LDA     R1.0            ; SP = R1
87EB 16 06 89                                                 STA     RP.0            ; :
87EE 15 11 89                                                 LDA     R1.1            ; :
87F1 16 07 89                                                 STA     RP.1            ; :
87F4 14 2B 84                                                 JPA     NEXT            ; Done
                                                      
87F7 82 3B D3                                         HSEMIS: DB      ^2 ";" ^'S'                             ; ***** ;S
87FA D5 87                                                    DW      HRPSTO
87FC 1D 06 89                                         SEMIS:  LDR     RP              ; IP = (RP)+
87FF 16 00 89                                                 STA     IP.0            ; :
8802 2E 06 89                                                 INW     RP              ; :
8805 1D 06 89                                                 LDR     RP              ; :
8808 16 01 89                                                 STA     IP.1            ; :
880B 2E 06 89                                                 INW     RP              ; :
880E 14 2B 84                                                 JPA     NEXT            ; Done
                                                      
8811 85 4C 45 41 56 C5                                HLEAVE: DB      ^5 "LEAV" ^'E'                          ; ***** LEAVE
8817 F7 87                                                    DW      HSEMIS
8819 1B 88                                            LEAVE:  DW      LEAVE0
881B 38 17 81                                         LEAVE0: JPS     _RPOP1          ; 2(RP) = (RP)
881E 38 C4 81                                                 JPS     _RPUT1          ; :
8821 38 CB 81                                                 JPS     _RPUSH1         ; :
8824 14 2B 84                                                 JPA     NEXT
                                                      
8827 82 3E D2                                         HTOR:   DB      ^2 ">" ^'R'                             ; ***** >R
882A 11 88                                                    DW      HLEAVE
882C 2E 88                                            TOR:    DW      TOR0
882E 38 73 80                                         TOR0:   JPS     _POP1           ; -(RP) = (SP)+
8831 38 CB 81                                                 JPS     _RPUSH1         ; :
8834 14 2B 84                                                 JPA     NEXT
                                                      
8837 82 52 BE                                         HFROMR: DB      ^2 "R" ^'>'                             ; ***** R>
883A 27 88                                                    DW      HTOR
883C 3E 88                                            FROMR:  DW      FROMR0
883E 38 17 81                                         FROMR0: JPS     _RPOP1          ; -(SP) = (RP)+
8841 38 71 81                                                 JPS     _PUSH1          ; :
8844 14 2B 84                                                 JPA     NEXT
                                                      
8847 81 D2                                            HR:     DB      ^1 ^'R'                                 ; ***** R
8849 37 88                                                    DW      HFROMR
884B 4D 88                                            R:      DW      R0
884D 38 10 81                                         R0:     JPS     _RGET1          ; -(SP) = (RP)
8850 38 71 81                                                 JPS     _PUSH1          ; :
8853 14 2B 84                                                 JPA     NEXT
                                                      
8856 82 30 BD                                         HZEQU:  DB      ^2 "0" ^'='                             ; ***** 0=
8859 47 88                                                    DW      HR
885B 5D 88                                            ZEQU:   DW      ZEQU0
885D 1D 04 89                                         ZEQU0:  LDR     SP              ; Get low byte
8860 11 00                                                    CPI     0               ; Is it zero?
8862 3A 76 88                                                 BNE     ZEQU10          ; NO: Return FALSE
8865 2E 04 89                                                 INW     SP              ; YES: Have to inspect
8868 1D 04 89                                                 LDR     SP              ; : high byte as well
886B 11 00                                                    CPI     0               ; Is it zero?
886D 3A 79 88                                                 BNE     ZEQU20          ; NO: Return FALSE
8870 2E 04 89                                                 INW     SP              ; Make POP complete
8873 14 52 84                                                 JPA     PUSHT           ; YES: Return TRUE
8876 2E 04 89                                         ZEQU10: INW     SP              ; POP argument off dstack
8879 2E 04 89                                         ZEQU20: INW     SP              ; : Make POP complete
887C 14 5B 84                                                 JPA     PUSHF           ; Return FALSE
                                                      
887F 82 30 BC                                         HZLESS: DB      ^2 "0" ^'<'                             ; ***** 0<
8882 56 88                                                    DW      HZEQU
8884 86 88                                            ZLESS:  DW      ZLESS0
8886 2E 04 89                                         ZLESS0: INW     SP              ; Inspect high byte only
8889 1D 04 89                                                 LDR     SP              ; Get high byte
888C 11 00                                                    CPI     0               ; Is high byte negative?
888E 3F 97 88                                                 BMI     ZLES10          ; YES: Return TRUE
8891 2E 04 89                                                 INW     SP              ; NO: POP high byte also
8894 14 5B 84                                                 JPA     PUSHF           ; Return FALSE
8897 2E 04 89                                         ZLES10: INW     SP              ; POP high byte also
889A 14 52 84                                                 JPA     PUSHT           ; Return TRUE
                                                      
889D 81 AB                                            HPLUS:  DB      ^1 ^'+'                                 ; ***** +
889F 7F 88                                                    DW      HZLESS
88A1 A3 88                                            PLUS:   DW      PLUS0
88A3 38 B6 80                                         PLUS0:  JPS     _POP2           ; Get second operand
88A6 38 73 80                                                 JPS     _POP1           ; Get first operand
88A9 38 0E 82                                                 JPS     _ADD16          ; R1 = R1 + R2
88AC 14 19 84                                                 JPA     PUSH            ; -(SP) = R1; NEXT
                                                      
88AF 82 44 AB                                         HDPLUS: DB      ^2 "D" ^'+'                             ; ***** D+
88B2 9D 88                                                    DW      HPLUS
88B4 B6 88                                            DPLUS:  DW      DPLUS0
88B6 38 BD 80                                         DPLUS0: JPS     _DPOP2          ; Get second operand
88B9 38 7A 80                                                 JPS     _DPOP1          ; Get first operand
88BC 38 1B 82                                                 JPS     _ADD32          ; R1X = R1X + R2X
88BF 14 61 84                                                 JPA     DPUSH           ; -(SP) = R1X; NEXT
                                                      
88C2 85 4D 49 4E 55 D3                                HMINUS: DB      ^5 "MINU" ^'S'                          ; ***** MINUS
88C8 AF 88                                                    DW      HDPLUS
88CA CC 88                                            MINUS:  DW      MINUS0
88CC 38 73 80                                         MINUS0: JPS     _POP1           ; Get operand
88CF 38 F0 82                                                 JPS     _NEG16          ; Negate
88D2 14 19 84                                                 JPA     PUSH
                                                      
88D5 86 44 4D 49 4E 55 D3                             HDMINU: DB      ^6 "DMINU" ^'S'                         ; ***** DMINUS
88DC C2 88                                                    DW      HMINUS
88DE E0 88                                            DMINU:  DW      DMINU0
88E0 38 7A 80                                         DMINU0: JPS     _DPOP1          ; Get operand
88E3 38 FE 82                                                 JPS     _NEG32          ; Negate
88E6 14 61 84                                                 JPA     DPUSH
                                                      
88E9 84 4F 56 45 D2                                   HOVER:  DB      ^4 "OVE" ^'R'                           ; **** OVER
88EE D5 88                                                    DW      HDMINU
88F0 F2 88                                            OVER:   DW      OVER0
88F2 38 B6 80                                         OVER0:  JPS     _POP2           ; n1 n2 -- n1 n2 n1
88F5 38 6C 80                                                 JPS     _GET1           ; :
88F8 38 8F 81                                                 JPS     _PUSH2          ; :
88FB 14 19 84                                                 JPA     PUSH            ; :
                                                      
88FE 84 44 00 00 00                                   HDROP:  DB      ^4 "DRO" ^'P'                           ; **** DROP
8903 00 00                                                    DW      HOVER
8905 00 00                                            DROP:   DW      DROP0
8907 00 00 00                                         DROP0:  INW     SP              ; n1 --
890A 2E 04 89                                                 INW     SP              ; :
890D 14 2B 84                                                 JPA     NEXT            ; Done
                                                      
8910 00 00 00 00 00                                   HSWAP:  DB      ^4 "SWA" ^'P'                           ; **** SWAP
8915 00 00                                                    DW      HDROP
8917 00 00                                            SWAP:   DW      OVER0
8919 00 00 00                                         SWAP0:  JPS     _POP2           ; n1 n2 -- n2 n1
891C 00 00 80                                                 JPS     _POP1           ; :
891F 38 00 00                                                 JPS     _PUSH2          ; :
8922 00 00 00                                                 JPA     PUSH            ; :
                                                      
8925 00 00 00 00                                      HDUP:   DB      ^3 "DU" ^'P'                            ; **** DUP
8929 00 00                                                    DW      HSWAP
892B 00 00                                            DUP:    DW      DUP0
892D 00 00 00                                         DUP0:   JPS     _GET1           ; n1 -- n1 n1
8930 00 00 00                                                 JPA     PUSH            ; :
                                                      
8933 00 00 00                                         HPSTOR: DB      ^2 "+" ^'!'                             ; ***** +!
8936 00 00                                                    DW      HDUP
8938 00                                               PSTOR:  DB      PSTOR0
8939 00 00 00                                         PSTOR0: JPS     _POP3           ; R3 = addr
893C 00 00 00                                                 JPS     _POP2           ; R2 = incr
893F 00 00 00                                                 JPS     _LD16           ; R1 = (R3)
8942 38 0E 82                                                 JPS     _ADD16          ; R1 = R1 + R2
8945 38 47 82                                                 JPS     _ST16           ; (R3) = R1
8948 14 2B 84                                                 JPA     NEXT            ; Done
                                                      
894B 86 54 4F 47 47 4C C5                             HTOGGL: DB      ^6 "TOGGL" ^'E'                         ; ***** TOGGLE
8952 33 89                                                    DW      HPSTOR
8954 56 89                                            TOGGL:  DW      TOGGL0
8956 38 B6 80                                         TOGGL0: JPS     _POP2           ; R2 = bit mask
8959 38 F9 80                                                 JPS     _POP3           ; R3 = addr
895C 38 34 82                                                 JPS     _LD16           ; R1 = (R3)
895F 38 A8 83                                                 JPS     _XOR16          ; R1 = R1 ^ R2
8962 38 47 82                                                 JPS     _ST16           ; (R3) = R1
8965 14 2B 84                                                 JPA     NEXT            ; Done
                                                      
8968 81 C0                                            HAT:    DB      ^1 ^'@'                                 ; ***** @
896A 4B 89                                                    DW      HTOGGL
896C 6E 89                                            AT:     DW      AT0
896E 38 F9 80                                         AT0:    JPS     _POP3           ; R3 = addr
8971 38 34 82                                                 JPS     _LD16           ; R1 = (R3)
8974 14 19 84                                                 JPA     PUSH            ; -(SP) = R1; NEXT
                                                      
8977 82 43 C0                                         HCAT:   DB      ^2 "C" ^'@'                             ; ***** C@
897A 68 89                                                    DW      HAT
897C 7E 89                                            CAT:    DW      CAT0
897E 2C 10 89                                         CAT0:   CLW     R1              ; R1 = 0
8981 38 F9 80                                                 JPS     _POP3           ; R3 = addr
8984 1D 18 89                                                 LDR     R3              ; A = (R3)
8987 16 10 89                                                 STA     R1.0            ; R1 = A
898A 14 19 84                                                 JPA     PUSH            ; -(SP) = R1; NEXT
                                                      
898D 81 A1                                            HSTORE: DB      ^1 ^'!'                                 ; ***** !
898F 77 89                                                    DW      HCAT
8991 93 89                                            STORE:  DW      STORE0
8993 38 F9 80                                         STORE0: JPS     _POP3           ; R3 = addr
8996 38 73 80                                                 JPS     _POP1           ; R1 = data
8999 38 47 82                                                 JPS     _ST16           ; (R3) = R1
899C 14 2B 84                                                 JPA     NEXT            ; Done
                                                      
899F 82 43 A1                                         HCSTOR: DB      ^2 "C" ^'!'                             ; ***** C!
89A2 8D 89                                                    DW      HSTORE
89A4 A6 89                                            CSTOR:  DW      CSTOR0
89A6 38 F9 80                                         CSTOR0: JPS     _POP3           ; R3 = addr
89A9 38 73 80                                                 JPS     _POP1           ; R1 = data
89AC 15 10 89                                                 LDA     R1.0            ; A = R1.0
89AF 1E 18 89                                                 STR     R3              ; (R3) = A
89B2 14 2B 84                                                 JPA     NEXT            ; Done
                                                      
                                                      ; INCLUDE         coldwarm.asm
                                                      
                                                      ; ----------------------------------------------------------------------
                                                      ; COLD AND WARM START ENTRY POINTS
                                                      
89B5 0E FE                                            CENT:   LDI     0xFE            ; Initialize Minimal stack pointer
89B7 16 FF FF                                                 STA     0xFFFF          ; :
89BA 0E 30                                                    LDI     <XSP            ; Initialize FORTH SP
89BC 16 04 89                                                 STA     SP.0            ; :
89BF 0E 89                                                    LDI     >XSP            ; :
89C1 16 05 89                                                 STA     SP.1            ; :
89C4 0E D1                                                    LDI     <TEST           ; Initialize FORTH IP
89C6 16 00 89                                                 STA     IP.0            ; :
89C9 0E 89                                                    LDI     >TEST           ; :
89CB 16 01 89                                                 STA     IP.1            ; :
89CE 14 2B 84                                                 JPA     NEXT            ; ... and over to FORTH VM
                                                      
89D1 8E 84 44 33 8E 84 66 55 31 87 40 83              TEST:   DW      LIT 0x3344 LIT 0x5566 USTAR _HALT
                                                      
89DD 00                                               WENT:   NOP
                                                      
89DE 20 20 54 4F 4B 45 4E 00 20 20 00                 STRING: DB      32 32 "TOKEN" 0 32 32 0
                                                      
                                                              ORG     0x8900
                                                      
                                                      ; INCLUDE         regs.asm
                                                      
                                                      ; ----------------------------------------------------------------------
                                                      ; THE VIRTUAL FORTH MACHINE REGISTERS
                                                      
                                                              ORG     0x8900
                                                      
                                                      IP:                             ; Instruction Pointer
8900 00                                               IP.0:   DB      0
8901 00                                               IP.1:   DB      0
                                                      
                                                      WA:                             ; Word Address Register
8902 00                                               WA.0:   DB      0
8903 00                                               WA.1:   DB      0
                                                      
                                                      SP:                             ; Data stack pointer
8904 00                                               SP.0:   DB      0
8905 00                                               SP.1:   DB      0
                                                      
                                                      RP:                             ; Return stack pointer
8906 00                                               RP.0:   DB      0
8907 00                                               RP.1:   DB      0
                                                      
                                                      UP:                             ; User area pointer
8908 00                                               UP.0:   DB      0
8909 00                                               UP.1:   DB      0
                                                      
                                                              ORG     0x8910
                                                      
                                                      R1:                             ; Working register R1
8910 00                                               R1.0:   DB      0
8911 00                                               R1.1:   DB      0
                                                      R1H:
8912 00                                               R1.2:   DB      0
8913 00                                               R1.3:   DB      0
                                                      
                                                      R2:                             ; Working register R2
8914 00                                               R2.0:   DB      0
8915 00                                               R2.1:   DB      0
                                                      R2H:
8916 00                                               R2.2:   DB      0
8917 00                                               R2.3:   DB      0
                                                      
                                                      R3:                             ; Working register R3
8918 00                                               R3.0:   DB      0
8919 00                                               R3.1:   DB      0
                                                      R3H:
891A 00                                               R3.2:   DB      0
891B 00                                               R3.3:   DB      0
                                                      
891C 00                                               BC:     DB      0               ; "Hidden" registers
891D 00                                               TMP:    DB      0               ; (used by _AND8 _OR8 _XOR8)
                                                      
                                                              ORG     0x8920
8920 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  XDP:    DW      0 0 0 0 0 0 0 0    
8930 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  XSP:    DW      0 0 0 0 0 0 0 0
8940 00 00                                            XRP:    DW      0
